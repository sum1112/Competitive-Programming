import java.util.*;
public class Euler {
	
	static int[] directionR = new int[] {-1,-1,-1,0,0,1,1,1 };
	static int[] directionC = new int[] {-1,1,1,-1,1,-1,0,1 };
	public static void main(String[] args) {
		  Scanner in = new Scanner(System.in);
		  int n = in.nextInt();
		  int[][] arr = new int[n][n];
		  for (int i = 0; i < n; i++) {
			  for (int j = 0; j < n; j++) {
				  arr[i][j] = in.nextInt();
			  }
		  }
		  int ans = 0;
		  
		  boolean[][] visited = new boolean[n][n];
		  for (int i = 0; i < n; i++) {
			  for (int j = 0; j < n; j++) {
				  
				  if (!visited[i][j] && arr[i][j] == 1) {
					  ans++;
					  dfs(arr, i, j, visited);
				  }
			  }
		  }
		  
		  System.out.println(ans);
	}
	
	public static void dfs(int[][] matrix, int i, int j, boolean[][] visited) {
		
		if (i >= 0 && i < visited.length && j >= 0 && j < visited[0].length && matrix[i][j] == 1) {
			
			if (visited[i][j]) return;
			visited[i][j] = true;
			for (int k = 0; k < 8; k++) {
				int r = i + directionR[k];
				int c = j + directionC[k];
				dfs(matrix, r, c, visited);
			}	
		}
	}
}
