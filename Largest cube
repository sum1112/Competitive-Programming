import java.io.*;
import java.math.*;
import java.util.*;

public class Main {

    static FastReader in;
    static PrintWriter o;

    public static void solve() {
        int t = in.nextInt();
        while (t-- > 0) {
            in.nextLine();
            int a = in.nextInt();
            int b = in.nextInt();
            int c = in.nextInt();
            long[][][] arr = new long[a][b][c];
            for (int i = 0; i < a; i++) {
                for (int j = 0; j < b; j++) {
                    for (int k = 0; k < c; k++) {
                        arr[i][j][k] = in.nextLong();
                    }
                }
            }
            long ans = Integer.MIN_VALUE;

            for (int k = 0; k < c; k++) {
                for (int i = 0; i < a; i++) {
                    for (int j = 0; j < b; j++) {
                        arr[i][j][k] = (i-1>=0 ? arr[i-1][j][k] : 0) + (j-1>=0 ? arr[i][j-1][k] : 0) - ((i-1>=0 && j-1>=0 ) ? arr[i-1][j-1][k] : 0) + arr[i][j][k];
                    }
                }
            }

            for (int i1 = 0; i1 < a; i1++) {
                for (int j1 = 0; j1 < b; j1++) {
                    for (int i2 = i1; i2 < a; i2++) {
                        for (int j2 = j1; j2 < b; j2++) {

                            long sum = 0;
                            for (int k = 0; k < c; k++) {
                                long val = 0;
                                val = arr[i2][j2][k];
                                if (j1 - 1 >= 0) val -= arr[i2][j1-1][k];
                                if (i1 - 1 >= 0) val -= arr[i1-1][j2][k];
                                if (i1 - 1 >= 0 && j1 - 1 >= 0) val += arr[i1-1][j1-1][k];
                                sum += val;
                                ans = Math.max(ans, sum);
                                sum = Math.max(sum, 0);
                            }

                        }
                    }
                }
            }
            o.println(ans);
            //o.println();
        }
        o.close();
        return;
    }

    public static void main(String[] args) {
        in = new FastReader();
        o = new PrintWriter(System.out);
        solve();
        return;
    }


    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        int[] readArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = nextInt();
            return a;
        }

        long[] readLongArray(int n) {
            long[] a = new long[n];
            for (int i = 0; i < n; i++) a[i] = nextLong();
            return a;
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
