import java.io.*;
import java.util.*;
import java.math.*;
public class Main {

    static FastReader in;
    static PrintWriter o;

    public static void solve() {
        int c = 1;
        while (true) {
            int n = in.nextInt();
            if (n == 0) break;
            List<int[]> arr = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                int x = in.nextInt();
                int y = in.nextInt();
                int z = in.nextInt();
                if (x != y && y != z) {
                    arr.add(new int[]{x, y, z});
                    arr.add(new int[]{y, z, x});
                    arr.add(new int[]{x, z, y});
                    continue;
                }
                if (x == y) {
                    arr.add(new int[]{x, y, z});
                    arr.add(new int[]{x, z, y});
                    continue;
                }
                if (y == z) {
                    arr.add(new int[]{y, z, x});
                    arr.add(new int[]{x, y, z});
                    continue;
                }
                if (x == z) {
                    arr.add(new int[]{x, z, y});
                    arr.add(new int[]{x, y, z});
                    continue;
                }
                if (x == y && y == x) {
                    arr.add(new int[]{x, y, z});
                }
            }
            Collections.sort(arr, new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    return (o1[0] * o1[1]) - (o2[0] * o2[1]);
                }
            });
            int[] dp = new int[arr.size()];
            int ans = Integer.MIN_VALUE;
            for (int i = 0; i < arr.size(); i++) {
                dp[i] = arr.get(i)[2];
            }
            for (int i = 1; i < arr.size(); i++) {
                int x1 = arr.get(i)[0];
                int y1 = arr.get(i)[1];
                for (int j = 0; j < i; j++) {
                    int[] a = arr.get(j);
                    int x2 = a[0];
                    int y2 = a[1];
                    if (x1 > x2 && y1 > y2) {
                        dp[i] = Math.max(dp[i], arr.get(i)[2] + dp[j]);
                    }
                    if (x1 > y2 && y1 > x2) {
                        dp[i] = Math.max(dp[i], arr.get(i)[2] + dp[j]);
                    }
                }
                ans = Math.max(ans, dp[i]);
            }
            o.println("Case " + c + ": maximum height = "+ans);
            c++;
        }
        o.close();
        return;
    }

    public static void main(String[] args) {
        in = new FastReader();
        o = new PrintWriter(System.out);
        solve();
        return;
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        int[] readArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++) a[i] = nextInt();
            return a;
        }

        long[] readLongArray(int n) {
            long[] a = new long[n];
            for (int i = 0; i < n; i++) a[i] = nextLong();
            return a;
        }

        String nextLine() {
            String str = "";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}
